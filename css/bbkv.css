/**
 * inuitcss font-size mixin
 */
/**
 * inuitcss media-query mixin
 */
/**
 * Vertical Rhythm/Gaps
 * Usage: @include vertical-gap(top);
 */
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  -ms-text-size-adjust: 100%;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 1 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

/**
 * IE6 was right!
 */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

/**
 * Reset some basic elements
 */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, dl, dd, ol, ul, hr, figure {
  margin: 0;
  padding: 0; }

/**
 * Set `margin-bottom` to maintain vertycal rhythm
 */
h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

.media {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/**
 * Wrapper
 */
.wrapper {
  max-width: 680px;
  margin-right: auto;
  margin-left: auto; }

/**
 * Clearfix
 */
.media:after, .site-header:after, .post:after, .bbk-member-note:after {
  content: "";
  display: table;
  clear: both; }

/**
 * Images
 */
img {
  /* Emphasis on `alt` text */
  font-style: italic;
  max-width: 100%; }

img, svg {
  vertical-align: middle; }

.img--right {
  float: right;
  margin-bottom: 24px;
  margin-left: 24px; }

.img--left {
  float: left;
  margin-right: 24px;
  margin-bottom: 24px; }

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 24px;
  margin-left: auto; }

.img--no-shadow {
  -webkit-box-shadow: none !important;
          box-shadow: none !important; }

.post img {
  -webkit-box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.4);
          box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.4); }

/**
 * Figures
 */
figure > img {
  display: block; }

figcaption {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }
  figcaption > a {
    font-weight: 300; }

/**
 * Rulers
 */
hr {
  border: 0;
  border-bottom: 1px solid #af1d1f;
  margin-bottom: 23px;
  margin-bottom: 1.4375rem; }

html {
  font: 300 1em/1.5 "Open Sans", Helvetica, Arial, sans-serif;
  color: #333;
  background-color: #fefefe;
  overflow-y: scroll;
  min-height: 100%; }

/**
 * Headings
 */
dt, h1, h2, h3, h4, h5, h6 {
  font-weight: 700; }

h1 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h2 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * Lists
 */
ul, ol, dd {
  margin-left: 24px;
  margin-left: 1.5rem; }
  @media only screen and (min-width: 481px) {
    ul, ol, dd {
      margin-left: 48px;
      margin-left: 3rem; } }

li > ul, li > ol {
  margin-bottom: 0; }

dd + dt {
  margin-top: 24px; }

/**
 * Rules
 */
hr {
  border: 0;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin-bottom: 23px;
  margin-bottom: 1.4375rem; }

/**
 * Inline elements
 */
strong {
  font-weight: 700; }

q {
  font-style: italic; }

/**
 * Links
 */
a {
  color: #333; }
  a:hover, a:active, a:focus {
    color: #af1d1f; }

.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 24px; }

.media__img--rev {
  float: right;
  margin-left: 24px; }

.media__img img, .media__img--rev img {
  display: block; }

.media__body {
  overflow: hidden; }

.media__body, .media__body > :last-child {
  margin-bottom: 0; }

@media only screen and (min-width: 1024px) {
  .site-header {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 13;
    width: 240px; } }

.site-logo {
  display: table;
  margin-top: 48px;
  margin-left: 24px; }
  @media only screen and (min-width: 481px) {
    .site-logo {
      margin-right: auto;
      margin-left: auto; } }
  @media only screen and (min-width: 1024px) {
    .site-logo {
      margin-right: 12px; } }

.nav {
  margin: 0;
  padding: 0;
  list-style: none; }

.site-nav {
  padding: 12px;
  background-color: #333;
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
  text-transform: uppercase;
  font-weight: 700; }
  @media only screen and (min-width: 1024px) {
    .site-nav {
      margin-top: 24px;
      background-color: #fefefe;
      text-align: right; } }

.site-nav--desk {
  display: none; }
  @media only screen and (min-width: 1024px) {
    .site-nav--desk {
      display: block; } }

.site-nav--mobile {
  display: none; }
  .site-nav--mobile:target {
    display: block; }
  @media only screen and (min-width: 1024px) {
    .site-nav--mobile, .site-nav--mobile:target {
      display: none; } }

.site-nav__item {
  display: block;
  position: relative;
  padding: 12px;
  color: #fff;
  text-decoration: none; }
  .site-nav__item:hover, .site-nav__item:focus {
    color: #fefefe; }
  @media only screen and (min-width: 1024px) {
    .site-nav__item {
      padding: 8px 0;
      color: #333; }
      .site-nav__item:hover, .site-nav__item:focus {
        color: #333; } }

.site-nav__item:hover:after, .site-nav__item:focus:after, .site-nav__item--current:after {
  content: "";
  position: absolute;
  top: 50%;
  z-index: 14;
  width: 48px;
  height: 4px;
  margin-top: -2px;
  margin-left: 12px; }

.site-nav__item:hover:after, .site-nav__item:focus:after {
  background-color: #fff; }
  @media only screen and (min-width: 1024px) {
    .site-nav__item:hover:after, .site-nav__item:focus:after {
      background-color: #333; } }

.site-nav__item--current:after {
  background-color: #af1d1f; }

.mobile-nav-toggle {
  display: block;
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 20px;
  font-weight: 700;
  text-transform: uppercase;
  text-decoration: none; }
  @media only screen and (min-width: 1024px) {
    .mobile-nav-toggle {
      display: none; } }

.page-content {
  margin-top: 48px;
  margin-top: 3rem;
  margin-bottom: 48px;
  margin-bottom: 3rem; }
  @media only screen and (min-width: 481px) {
    .page-content {
      margin-top: 96px;
      margin-top: 6rem; } }
  @media only screen and (min-width: 481px) {
    .page-content {
      margin-bottom: 96px;
      margin-bottom: 6rem; } }
  @media only screen and (min-width: 1024px) {
    .page-content {
      margin-left: 288px; } }

.post {
  margin-bottom: 48px;
  margin-bottom: 3rem; }
  @media only screen and (min-width: 481px) {
    .post {
      margin-bottom: 96px;
      margin-bottom: 6rem; } }

.post__title > a {
  text-decoration: none; }

.img--opacity {
  opacity: 0.4;
  -webkit-transition: opacity 0.2s ease-out;
  transition: opacity 0.2s ease-out; }
  .img--opacity:hover {
    opacity: 1; }

.pagination {
  margin-bottom: 0;
  margin-left: 0;
  list-style: none;
  text-align: center; }
  .pagination > li {
    padding: 12px;
    display: inline-block; }

.tooltip {
  position: relative; }
  .tooltip:after {
    content: attr(data-tooltip);
    position: absolute; }

.tooltip--bbk {
  float: right;
  width: 50px;
  height: 50px; }
  .tooltip--bbk:after {
    width: 180px;
    padding: 6px;
    top: -19px;
    right: 56px;
    font-size: 13px;
    color: #fefefe;
    background-color: #333;
    border-radius: 4px;
    visibility: hidden;
    opacity: 0;
    -webkit-transition: opacity 0.2s ease-in;
    transition: opacity 0.2s ease-in; }
    @media only screen and (min-width: 481px) {
      .tooltip--bbk:after {
        left: 56px; } }
  .tooltip--bbk:hover:after {
    visibility: visible;
    opacity: 1; }

.bbk-member-note {
  padding: 12px; }
  @media only screen and (max-width: 1023px) {
    .bbk-member-note {
      display: none; } }

.member {
  padding: 12px; }

.member__link {
  display: block; }
  .member__link .member__title:after {
    content: "\0020" "\00BB"; }

.member__thumbnail {
  width: 100px;
  height: 100px;
  background-color: #af1d1f;
  float: left; }

.member__title {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2;
  display: inline-block;
  color: #333;
  line-height: 100px;
  margin-bottom: 0;
  margin-left: 24px; }

.member__content {
  display: none;
  height: 0;
  overflow: hidden;
  padding-top: 24px;
  margin-bottom: 48px;
  margin-bottom: 3rem; }
  @media only screen and (min-width: 481px) {
    .member__content {
      margin-bottom: 96px;
      margin-bottom: 6rem; } }
  :target > .member__content, .member__content.visible {
    display: block; }
  :target > .member__content {
    height: auto; }
  .member__content > :last-child {
    margin-bottom: 0; }

.member__images {
  margin-bottom: 24px;
  margin-left: -12px; }
  .member__images img {
    margin-bottom: 12px;
    margin-left: 12px; }
/*# sourceMappingURL=data:application/json;base64, */